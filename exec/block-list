#!/usr/bin/env /usr/bin/python

import json
import re
import subprocess
import os

def find_block(name):
    global calling_pwd

    env_name = name.split("/")[-1].replace("-","_")

    if os.path.exists("%s/work/%s" % (os.getcwd(),os.path.basename(name))):
        calling_pwd = os.getcwd()
        return "%s/work/%s" % (calling_pwd, os.path.basename(name))
    elif os.path.exists("%s/work/%s" % (calling_pwd,os.path.basename(name))):
        return "%s/work/%s" % (calling_pwd, os.path.basename(name))
    elif os.path.exists("%s" % os.environ.get("_%s_home" % env_name,False)):
        return os.environ.get("_%s_home" % env_name)
    elif os.path.exists("%s/%s" % (os.environ['BLOCK_PATH'],os.path.basename(name))):
        return "%s/%s" % (os.environ['BLOCK_PATH'], os.path.basename(name))
    elif os.environ.get('BLOCK_META',False):
        return "%s/work/%s" % (calling_pwd, os.path.basename(name))
    elif os.path.exists("%s/.git" % calling_pwd):
        return "%s/%s" % (os.environ['BLOCK_PATH'], os.path.basename(name))
    else:
        return "%s/work/%s" % (calling_pwd, os.path.basename(name))

def git_defaults(ele):
    m = re.search('^(\w+)/', ele)
    if not m:
        ele = "imma/%s" % (ele)
    
    prefix = os.environ.get('GIT_CC_PREFIX','git@github.com:')
    if prefix.find("github.com") < 0:
        ele = ele.replace("/","--")

    return "%s%s" % (prefix,ele)

def flattern(A):
    for i in A:
        if isinstance(i,list): 
            for ii in flattern(i):
                yield ii
        else:
            yield i

def list_block(block = None, seen = { }):
    if not block:
        if os.path.exists(".git"):
            try:
                git_branch = subprocess.check_output([ 'git', 'rev-parse', '--abbrev-ref', 'HEAD' ]).decode('ascii', 'ignore').strip()
                git_remote = subprocess.check_output([ 'git', 'rev-parse', '--abbrev-ref', "%s@{upstream}" % git_branch ]).decode('ascii', 'ignore').strip()
                git_remote = git_remote.split("/")[0]
                git_url = subprocess.check_output([ 'git', 'config', '--get', "remote.%s.url" % git_remote ]).decode('ascii', 'ignore').strip()
            except subprocess.CalledProcessError:
                git_url = '.'

            block = {
                'name': os.path.basename(os.environ['PWD']),
                'path': os.environ['PWD'],
                'git': git_url
            }
        else:
            block = {
                'name': os.path.basename(os.environ['PWD']),
                'path': os.environ['PWD'],
                'git': '.',
                'body': { "require": [] }
            }

    if block:
        try:
            os.chdir(block['path'])
        except OSError:
            seen[block['name']] = True
            yield block
            return

    if os.path.isfile('.block-name') and os.path.exists(".git"):
        with open('.block-name') as f:
            block['name'] = f.read().strip()

    if block['name'] in seen:
        return

    try:
        with open('Blockfile.json') as f:
            block['body'] = json.load(f)
            block['body']['require'] = flattern(block['body'].get('require', []))
    except IOError:
        block['body'] = { "require": [] }

    if not os.environ.get("BLOCK_NO_SITE"):
        try:
            with open('Blockfile.json.site') as f:
                site_block = json.load(f)
                block['body']['require'] = list(block['body']['require']) + list(flattern(site_block.get('require', [])))
        except IOError:
            True

    seen[block['name']] = True

    for b in block['body']['require']:
        name = b.split("@")[0] 

        for dep in list_block({ 
            'name': name,
            'path': find_block(name),
            'git': git_defaults(name) }):
            yield dep

    yield block

def main():
    if not os.path.exists(".git") and not os.path.exists("Blockfile.json"):
        os.chdir(subprocess.check_output(['git', 'rev-parse', '--show-cdup']).decode('ascii', 'ignore').strip())

    for b in list_block():
        print("%s %s %s" % (b['name'], b['path'], b['git']))

calling_pwd = os.environ.get('CALLING_PWD',os.environ['PWD'])
main()
