#!/usr/bin/env bash

# Block's profile provides the `require` function to source a block's
# dependencies and profile.

function bl {
  block "$@"
}

function gen_profile {
  # ### For each block dependency:
  block list | while read -r nm_block pth_block git_block version_block end_block; do
    # If a block is missing, break.  Something didn't bootstrap correctly or yet.
    if [[ ! -d "$pth_block" ]]; then
      echo "WARNING: missing $nm_block block" 1>&2
      break
    fi

    # To avoid recalculating the block home, set it as `_$block_home`, replacing `.-\`
    # with `_`
    local nm_block_safe="${nm_block//-/_}"
    nm_block_safe="${nm_block_safe##*/}"
    nm_block_safe="${nm_block_safe//\./_}"
    local nm_pth_block="pth_block"
    export "_${nm_block_safe}_home"="${!nm_pth_block}"

    # If block profile is found, source it; assume profile will source rc as
    # needed.  If only rc is found, source it.
    if [[ -e "$pth_block/script/profile" ]]; then
      echo "source $pth_block/script/profile"
    fi
  done
}

# ## Require
function require {
  # Ensure no arguments are passed to require.  Any arguments are passed on to
  # profiles that are sourced without arguments.
  set --

  local pth_rc="${BOARD_PATH:-$HOME}/script/rc"
  if [[ -f "$pth_rc" ]]; then
    source "$pth_rc"
  fi
  source <(gen_profile)
}

function _block_profile {
  local shome="${_block_home:="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"}"
  PATH="$shome/bin:$shome/exec:$PATH"

  if [[ -z "${BLOCK_PATH:-}" ]]; then
    export BLOCK_PATH="$(cd -P -- "${BASH_SOURCE%/*}/../.." && pwd -P)"
  fi

  for _a in "$@"; do
    if [[ -n "$_a" ]]; then
      local pth_block="$_a"; shift
      pushd "$pth_block" >/dev/null
      require
      popd > /dev/null
    fi
  done
}

_block_profile "$@"
